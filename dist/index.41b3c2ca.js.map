{"mappings":"AAWA,MAAMA,kBAAmC,CACvCC,QAAS,CACPC,QAASC,SAASC,iBAChB,4BACA,GACFC,UAAW,IAAIC,OAAO,QAExBC,UAAW,CACTL,QAASC,SAASC,iBAChB,4BACA,GACFC,UAAW,IAAIC,OAAO,UAExBE,UAAW,CACTN,QAASC,SAASC,iBAChB,4BACA,GACFC,UAAW,IAAIC,OAAO,UAExBG,MAAO,CACLP,QAASC,SAASC,iBAChB,4BACA,GACFC,UAAW,IAAIC,OAAO,SAGpBI,WAAuB,GAC7B,IAAK,IAAIC,EAAI,GAAIA,EAAI,IAAKA,IACxBD,WAAWE,KAAKC,OAAOC,aAAaH,IAGtC,SAASI,0BACP,MAAMC,EACJb,SAASc,cAAc,mBACrBD,GACFE,UAAUC,UAAUC,UAAUJ,EAASK,UAE3C,CAEA,SAASC,yBACP,MAAMC,EACJpB,SAASc,cAAc,qBACrBM,IACFA,EAAcC,MAAMC,QAAU,QAC9BC,YAAW,KACTH,EAAcI,UAAUC,OAAO,UAC9B,IACHF,YAAW,KACTH,EAAcI,UAAUC,OAAO,UAC9B,KAEP,CAEA,SAASC,0BACP,MAAMC,EAAiC3B,SAASc,cAAc,gBAC9D,GAAIa,EAAO,CACT,MAAMC,EAAcC,OAAOF,GAAOC,KAC5BE,EAAcD,OAAOF,GAAOG,KAC5BC,EAAgB,IAAOF,OAAOF,GAAOI,QAAWD,EAAMF,GAC5DD,EAAMN,MAAMW,WAAa,8CACvBD,EAAQ,yBACaA,EAAQ,MACjC,CACF,CAEA,SAASE,gBACP,MAAMN,EAAiC3B,SAASc,cAAc,gBACxDiB,EAAgBJ,EAAQA,EAAMI,MAAQ,GACtCG,EAAwClC,SAASc,cACrD,0BAEEoB,IACFA,EAAkBhB,UAAYa,EAElC,CACA,SAASI,0BACP,IAAIC,EAAmB,GACvB,IAAK,IAAIL,KAASM,OAAOC,OAAOzC,mBAC1BkC,EAAMhC,QAAQwC,UAChBH,EAASA,EAAOI,OACdjC,WAAWkC,QAAQC,GAASX,EAAM7B,UAAUyC,KAAKD,OAIvD,OAAON,CACT,CAEA,SAASQ,uBAAuBC,EAAcC,GAC5C,OAAKA,EAAWC,OAGTC,MAAMH,GACVI,KAAK,IACLC,KAAI,IAAMJ,EAAWK,KAAKC,MAAMD,KAAKE,SAAWP,EAAWC,WAC3DO,KAAK,IALC,EAMX,CAEA,SAASC,OACP,MAAMC,EAAwCxD,SAASc,cAAc,gBAC/D2C,EAAsCzD,SAASc,cAAc,mBACnEd,SACGc,cAAc,yBACb4C,iBAAiB,SAAS,KAC1B9C,0BACAO,wBAAA,IAEJO,0BACAO,gBACAuB,GAAcE,iBAAiB,SAAS,KACtChC,0BACAO,eAAA,IAEF0B,QAAQC,IAAIhB,uBAAuB,GAAIT,4BACvCnC,SACGc,cAAc,qBACb4C,iBAAiB,SAAUG,IAC3BA,EAAMC,iBACN,MAAMjB,EAAeW,EAAe3B,OAAO2B,EAAazB,OAAS,EAC9D0B,IACDA,EAAgBvC,UAAY0B,uBAAuBC,EAAMV,2BAAA,GAIjE,CAEAoB","sources":["src/scripts/app.ts"],"sourcesContent":["type RegexElement = {\n  element: HTMLInputElement;\n  condition: RegExp;\n};\ntype passwordMatch = {\n  symbols: RegexElement;\n  uppercase: RegexElement;\n  lowercase: RegexElement;\n  digit: RegexElement;\n};\n\nconst GENERATE_PASSWORD: passwordMatch = {\n  symbols: {\n    element: document.querySelectorAll(\n      '.setting__checked-option'\n    )[3] as HTMLInputElement,\n    condition: new RegExp('\\\\W'),\n  },\n  uppercase: {\n    element: document.querySelectorAll(\n      '.setting__checked-option'\n    )[0] as HTMLInputElement,\n    condition: new RegExp('[A-Z]'),\n  },\n  lowercase: {\n    element: document.querySelectorAll(\n      '.setting__checked-option'\n    )[1] as HTMLInputElement,\n    condition: new RegExp('[a-z]'),\n  },\n  digit: {\n    element: document.querySelectorAll(\n      '.setting__checked-option'\n    )[2] as HTMLInputElement,\n    condition: new RegExp('\\\\d'),\n  },\n};\nconst CHARACTERS: string[] = [];\nfor (let i = 33; i < 127; i++) {\n  CHARACTERS.push(String.fromCharCode(i));\n}\n\nfunction copyPasswordToClipBoard(): void {\n  const password: HTMLElement | null =\n    document.querySelector('.password__text');\n  if (password) {\n    navigator.clipboard.writeText(password.innerText);\n  }\n}\n\nfunction animationSuccesMessage(): void {\n  const succesMessage: HTMLElement | null =\n    document.querySelector('.password__succes');\n  if (succesMessage) {\n    succesMessage.style.display = 'block';\n    setTimeout(() => {\n      succesMessage.classList.toggle('show');\n    }, 10);\n    setTimeout(() => {\n      succesMessage.classList.toggle('show');\n    }, 2000);\n  }\n}\n\nfunction setProgressColorInRange(): void {\n  const range: HTMLInputElement | null = document.querySelector('.green-range');\n  if (range) {\n    const min: number = Number(range?.min);\n    const max: number = Number(range?.max);\n    const value: number = (100 * Number(range?.value)) / (max - min);\n    range.style.background = `linear-gradient(90deg, rgba(164,255,175,1) ${\n      value - 0.3\n    }%, rgba(24,23,31,1) ${value - 0.3}%)`;\n  }\n}\n\nfunction setValueRange() {\n  const range: HTMLInputElement | null = document.querySelector('.green-range');\n  const value: string = range ? range.value : '';\n  const rangeDisplayValue: HTMLElement | null = document.querySelector(\n    '.setting__length-value'\n  );\n  if (rangeDisplayValue) {\n    rangeDisplayValue.innerText = value;\n  }\n}\nfunction generateValidCharsArray(): string[] {\n  let result: string[] = [];\n  for (let value of Object.values(GENERATE_PASSWORD)) {\n    if (value.element.checked) {\n      result = result.concat(\n        CHARACTERS.filter((char) => value.condition.test(char))\n      );\n    }\n  }\n  return result;\n}\n\nfunction generateRandomPassword(size: number, characters: string[]): string {\n  if (!characters.length) {\n    return '';\n  }\n  return Array(size)\n    .fill('')\n    .map(() => characters[Math.floor(Math.random() * characters.length)])\n    .join('');\n}\n// TODO: peut etre passe les selecteurs au fonction pour rendre celle ci plus generique\nfunction main(): void {\n  const rangeElement: HTMLInputElement | null = document.querySelector('.green-range')\n  const passwordElement: HTMLElement | null = document.querySelector('.password__text')\n  document\n    .querySelector('.password__copy-icon')\n    ?.addEventListener('click', () => {\n      copyPasswordToClipBoard();\n      animationSuccesMessage();\n    });\n  setProgressColorInRange();\n  setValueRange();\n  rangeElement?.addEventListener('input', () => {\n    setProgressColorInRange();\n    setValueRange();\n  });\n  console.log(generateRandomPassword(10, generateValidCharsArray()));\n  document\n    .querySelector('.setting__submit')\n    ?.addEventListener('click', (event) => {\n      event.preventDefault();\n      const size: number = rangeElement ? Number(rangeElement.value) : 0;\n      if(passwordElement){\n        passwordElement.innerText = generateRandomPassword(size, generateValidCharsArray())\n      }\n      \n    });\n}\n\nmain();\n"],"names":["GENERATE_PASSWORD","symbols","element","document","querySelectorAll","condition","RegExp","uppercase","lowercase","digit","CHARACTERS","i","push","String","fromCharCode","copyPasswordToClipBoard","password","querySelector","navigator","clipboard","writeText","innerText","animationSuccesMessage","succesMessage","style","display","setTimeout","classList","toggle","setProgressColorInRange","range","min","Number","max","value","background","setValueRange","rangeDisplayValue","generateValidCharsArray","result","Object","values","checked","concat","filter","char","test","generateRandomPassword","size","characters","length","Array","fill","map","Math","floor","random","join","main","rangeElement","passwordElement","addEventListener","console","log","event","preventDefault"],"version":3,"file":"index.41b3c2ca.js.map"}